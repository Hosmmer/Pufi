{"version":3,"sources":["pages/forms/Alerta.js","pages/forms/Form.js","components/PageTitle.js"],"names":["AlertsWithIcon","color","mensaje","nombre","Card","Body","Alert","variant","className","classNames","Alerta","props","Row","Col","ScreenreaderOnlyLabel","now","value","ProgressBar","label","visuallyHidden","INIT_ITEMS","Nombre","Email","Edad","Celular","textcolor","mensalert","validated","FormValidation","useState","values","setValues","Fragment","PageTitle","breadCrumbItems","path","active","title","lg","Form","noValidate","onSubmit","event","preventDefault","stopPropagation","swal","buttons","timer","FINIST_ITEMS","console","log","Group","controlId","Label","Control","required","pattern","type","placeholder","defaultValue","onChange","e","target","Items_error","Items_ok","dato","i","length","indexOf","charAt","isNumeric","onValideNombre","Feedback","InputGroup","hasValidation","Text","id","aria-describedby","email","exec","onValideEmail","mask","edad","parseInt","onValideEdad","Button","Item","href","map","item","index"],"mappings":"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","file":"static/js/15.b0be2b98.chunk.js","sourcesContent":["// @flow\r\nimport { Row, Col, Card, Alert } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// components\r\n\r\nconst AlertsWithIcon = ({ color, mensaje, nombre }) => {\r\n    const icons = ['dripicons-warning'];\r\n    return (\r\n        color === 'danger' && (\r\n            <Card>\r\n                <Card.Body>\r\n                    <Alert variant={color} key={nombre}>\r\n                        <i className={classNames(icons[0], 'me-2')}></i>\r\n                        <strong>Advertencia:</strong> {mensaje}\r\n                    </Alert>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    );\r\n};\r\n\r\nconst Alerta = (props): React$Element<React$FragmentType> => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <AlertsWithIcon color={props.color} mensaje={props.mensaje} nombre={props.nombre} />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Alerta;\r\n","// @flow\nimport React, { useState } from 'react';\nimport { Row, Col, Card, Button, InputGroup, Form, ProgressBar } from 'react-bootstrap';\nimport MaskedInput from 'react-text-mask';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport Alerta from './Alerta';\nimport swal from 'sweetalert';\n\nfunction isNumeric(dato) {\n    var numeros = '0123456789';\n    for (let i = 0; i < dato.length; i++) {\n        if (numeros.indexOf(dato.charAt(i), 0) !== -1) {\n            return 1;\n        }\n    }\n    return 0;\n}\nconst ScreenreaderOnlyLabel = ({ value }) => {\n    const now = value;\n    return (\n        <Card>\n            <Card.Body>\n                <ProgressBar now={now} label={`${now}%`} visuallyHidden />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst INIT_ITEMS = {\n    Nombre: null,\n    Email: null,\n    Edad: null,\n    Celular: null,\n    now: 0,\n    textcolor: 'success',\n    mensalert: '',\n    validated: false,\n};\nconst FormValidation = (): React$Element<React$FragmentType> => {\n    const [values, setValues] = useState(INIT_ITEMS);\n    /*\n     * validar  nombre\n     */\n    const onValideNombre = (e) => {\n        let nombre = e.target.value;\n\n        const Items_error = {\n            ...values,\n            textcolor: 'danger',\n            validated: false,\n            mensalert: 'El Campo Nombre no puede llevar número',\n            now: 25,\n        };\n        const Items_ok = {\n            ...values,\n            textcolor: 'success',\n            validated: true,\n            mensalert: '',\n            now: 25,\n            Nombre: nombre,\n        };\n\n        if (nombre) {\n            isNumeric(nombre) === 0 ? setValues(Items_ok) : setValues(Items_error);\n        }\n    };\n    /*\n     * validar  email\n     */\n    function onValideEmail(e) {\n        let email = e.target.value;\n        const Items_ok = {\n            ...values,\n            textcolor: 'danger',\n            validated: false,\n            mensalert: 'El Campo Email requiere el carácter @',\n        };\n        const Items_error = {\n            ...values,\n            textcolor: 'success',\n            validated: true,\n            mensalert: '',\n            now: 25,\n            Email: email,\n        };\n        let patron = /^([da-z_.-]+)@([da-z.-]+).([a-z.]{2,6})$/;\n        !patron.exec(email) > 0 ? setValues(Items_ok) : setValues(Items_error);\n    }\n    /*\n     * validar  edad\n     */\n    function onValideEdad(e) {\n        let edad = parseInt(e.target.value);\n        const Items_ok = {\n            ...values,\n            textcolor: 'success',\n            validated: true,\n            mensalert: '',\n            now: 25,\n            Edad: edad,\n        };\n        const Items_error = {\n            ...values,\n            textcolor: 'danger',\n            validated: false,\n            mensalert: 'El Campo Edad esta fuera del rango solicitado',\n        };\n        (edad >= 18 && edad <= 100) > 0 ? setValues(Items_ok) : setValues(Items_error);\n    }\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event) => {\n        if (values.validated) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            swal('Tu información fue enviada con éxito, estaremos en contacto contigo', {\n                buttons: false,\n                timer: 3000,\n            });\n            const FINIST_ITEMS = {\n                Nombre: values.Nombre,\n                Email: values.Email,\n                Edad: values.Edad,\n                Celular: values.Celular,\n            };\n\n            console.log(FINIST_ITEMS);\n\n            setValues(INIT_ITEMS);\n        }\n    };\n    /*\n     * handle date change\n     */\n\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[{ label: 'Forms', path: '/pages/forms/form', active: true }]}\n                title={'Formulario para el registro de Pasajeros'}\n            />\n            <Row>\n                <Col lg={3}></Col>\n                <Col lg={6}>\n                    <Alerta color={values.textcolor} mensaje={values.mensalert} nombre={values.Nombre} />\n                </Col>\n                <Col lg={3}></Col>\n            </Row>\n            <Row>\n                <Col lg={3}></Col>\n                <Col lg={6}>\n                    {values.now > 0 ? <ScreenreaderOnlyLabel value={values.now} /> : ''}\n                    <Card>\n                        <Card.Body>\n                            <Form noValidate validated={values.validated} onSubmit={handleSubmit}>\n                                <Form.Group className=\"mb-3\" controlId=\"Nombre\">\n                                    <Form.Label>Nombre Completo {values.Nombre}</Form.Label>\n                                    <Form.Control\n                                        required\n                                        pattern=\"^[a-zA-Z ]*$\"\n                                        type=\"text\"\n                                        placeholder=\"Nombre Completo\"\n                                        defaultValue={values.Nombre}\n                                        onChange={(e) => {\n                                            setValues({ ...values, Nombre: e.target.value });\n                                            onValideNombre(e);\n                                        }}\n                                    />\n\n                                    <Form.Control.Feedback>Datos ingresados correctamente</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"Email\">\n                                    <Form.Label>Email</Form.Label>\n                                    <InputGroup hasValidation>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"Email\"\n                                            //pattern=\"^[a-zA-Z ]*$\"\n                                            aria-describedby=\"inputGroupPrepend\"\n                                            defaultValue={values.Email}\n                                            onChange={(e) => {\n                                                setValues({ ...values, Email: e.target.value });\n                                                onValideEmail(e);\n                                            }}\n                                        />\n\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            Por favor verifique la validación de su Email.\n                                        </Form.Control.Feedback>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"Celular\">\n                                    <div className=\"form-group\">\n                                        <label>Celular</label> <br />\n                                        <MaskedInput\n                                            required\n                                            defaultValue={values.Celular}\n                                            mask={[\n                                                '(',\n                                                /[1-9]/,\n                                                /\\d/,\n                                                /\\d/,\n                                                ')',\n                                                ' ',\n                                                /\\d/,\n                                                /\\d/,\n                                                /\\d/,\n                                                '-',\n                                                /\\d/,\n                                                /\\d/,\n                                                /\\d/,\n                                                /\\d/,\n                                            ]}\n                                            placeholder=\"(___) ___-____\"\n                                            className=\"form-control\"\n                                            onChange={(e) => {\n                                                setValues({ ...values, Celular: e.target.value });\n                                            }}\n                                        />\n                                    </div>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please provide a valid Celular.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"Edad\">\n                                    <Form.Label>Rango de edad de 18-100</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Edad\"\n                                        pattern=\"^[0-9]*$\"\n                                        required\n                                        defaultValue={values.Edad}\n                                        onChange={(e) => {\n                                            setValues({ ...values, Edad: e.target.value });\n                                            onValideEdad(e);\n                                        }}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please provide a valid Rango de edad.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Button type=\"submit\">Registrar</Button>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col lg={3}></Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FormValidation;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb className=\"m-0\">\n                            <Breadcrumb.Item href=\"/\">Inicio</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}